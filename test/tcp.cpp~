#include <sys/socket.h>
#include <sys/ioctl.h>
#include <linux/if_packet.h>
#include <linux/if_ether.h>
#include <linux/if.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <iostream>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <errno.h>
#include <unistd.h>
#include <pthread.h>
#include <thread>
using namespace std;

struct sockaddr_in addr_;
int sock;
string id = "00000001";
unsigned char crt[162];
unsigned char pcrt[162] = {
0x02,0x1d,0x12,0xe8,0xf8,0xf0,0x36,0x61,0x55,0x72,0x6b,0xc3,0x4b,0x73,0x3b,0xcb,0xab,0x73,0x43,0xab,
0x63,0x4b,0x0b,0x72,0x05,0x75,0x9a,0x41,0x1b,0x65,0x25,0xb6,0x91,0x01,0x5d,0x84,0x85,0xce,0xa0,0xf7,
0xac,0x75,0x49,0x6f,0xd1,0x53,0x0d,0x75,0x49,0x6d,0x3c,0xff,0x5d,0x2c,0x0a,0xa6,0x59,0x5d,0x06,0x76,
0x1f,0xd9,0xb2,0x3c,0xf8,0x4f,0x63,0x6e,0x8c,0x90,0xf4,0x67,0xb7,0x6d,0xc1,0x2c,0x10,0x9d,0xc7,0x88,
0xe2,0xc5,0x05,0x7f,0xd7,0x86,0xd5,0xce,0xf1,0x1c,0xf3,0x16,0xdf,0x1c,0xfc,0x51,0x5f,0x47,0xc6,0x33,
0x3a,0xce,0xb4,0x2f,0xb6,0x52,0xf4,0x88,0x12,0x46,0xe6,0x07,0x7d,0x69,0xda,0xe4,0xf7,0x9b,0xb0,0x9a,
0x56,0x50,0x80,0xd8,0x9b,0x0d,0x71,0x49,0x40,0x29,0x56,0x65,0x2a,0x47,0xff,0xbd,0xb4,0x52,0x07,0x8e,
0xac,0x53,0xc3,0xff,0x81,0x6e,0xb9,0x7d,0xa5,0xb9,0xa5,0x3d,0xd9,0x94,0x95,0x69,0x01,0x77,0x59,0xfc,
0xc4,0x00


};


unsigned char rcrt[162] ={
0x02,0x13,0x95,0xea,0x53,0x85,0x88,0x64,0x61,0xc2,0x6b,0xc3,0x4b,0x73,0x3b,0xcb,0xab,0x73,0x43,0xab,
0x63,0x4b,0x0b,0x72,0x02,0xfa,0xe8,0xa3,0x26,0xb2,0x5c,0x49,0x1e,0x4d,0xba,0x71,0xa4,0x84,0x3c,0x5e,
0x54,0x03,0xb9,0x42,0x37,0xf0,0x60,0x62,0xa3,0x98,0xd6,0x45,0xba,0xad,0xa3,0x43,0xf9,0xe4,0x69,0x21,
0xd6,0x58,0x73,0x64,0xfe,0x30,0xb9,0x55,0x0e,0x49,0x27,0x35,0x4a,0xe2,0x63,0x38,0x5a,0xef,0x71,0xa7,
0x31,0xbc,0x1d,0xa0,0xe8,0x16,0x19,0x1b,0x11,0x1c,0xf3,0x16,0xdf,0x1c,0xfc,0x51,0x5f,0x42,0xfa,0xb0,
0xae,0x4e,0x20,0x0f,0x7c,0xbb,0x5c,0x68,0x60,0x45,0x93,0x85,0xff,0x29,0x82,0x3f,0x5d,0xbd,0x70,0x66,
0x2b,0xb9,0x95,0x0f,0x89,0xc2,0x7e,0x97,0x75,0xb9,0x29,0xac,0x91,0x60,0xf1,0x1f,0x38,0x78,0xff,0x63,
0xd0,0x29,0xf5,0x74,0x1e,0xc9,0x72,0x49,0x7e,0x2c,0xba,0xf4,0xf3,0x7a,0xc9,0xec,0x25,0xab,0x25,0x11,
0x4d,0x80

};
unsigned char ecrt[162] = {
0x02,0x1d,0x3e,0xa0,0x76,0xe0,0xad,0x0d,0xa7,0x50,0x6b,0xc3,0x4b,0x73,0x3b,0xcb,0xab,
0x73,0x43,0xab,0x63,0x4b,0x0b,0x72,0x02,0x67,0xf4,0x97,0xf5,0x41,0x61,0x19,0x98,0x7a,
0x56,0xe5,0x3e,0x02,0x52,0x40,0x02,0x9b,0x13,0xd3,0xb7,0x7b,0xb2,0xad,0xc0,0x97,0x33,
0xb0,0x02,0xe8,0xcc,0x7d,0x90,0x57,0x97,0x94,0xae,0xc8,0x10,0x3a,0x32,0xbf,0x90,0xb0,
0x2d,0x78,0x0b,0xd9,0xa4,0xc9,0x69,0x7b,0x5d,0xd9,0x71,0x20,0xc4,0x8d,0x56,0xa7,0xcd,
0xc3,0xef,0x5a,0x49,0x1c,0xf3,0x18,0x0d,0x2f,0xc3,0x0f,0x8d,0x0b,0x3a,0x8a,0xe8,0xe3,
0x4a,0xa3,0xdc,0x4a,0x49,0xe9,0x10,0xa5,0x5e,0xdf,0x87,0x8d,0x3b,0x9c,0xdf,0xb2,0xaa,
0x2b,0xdd,0xf8,0xef,0x1c,0xc9,0x01,0xf9,0x1e,0x89,0x9a,0xcc,0x77,0x78,0xd9,0xff,0x87,
0xa4,0x60,0x55,0xe5,0xf7,0x92,0x96,0x0f,0xab,0xd7,0xaf,0x33,0xfa,0xa9,0x83,0xd7,0x01,
0xd8,0xf9,0x51,0x54,0x04,0xd8,0x0d,0x89,0x80
};
int create_socket(){

    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        printf("CreateSocket: socket() Failed!\n");
        return -1;
    } 

    bzero(&addr_,sizeof(struct sockaddr_in));
    addr_.sin_family = AF_INET;
    addr_.sin_addr.s_addr = inet_addr("127.0.0.1");
    addr_.sin_port = htons(6666); 

    return 0;
}
unsigned char* IntToUnsignedChar(unsigned int num){
    unsigned char *ret = (unsigned char* )malloc(4);
    if (!ret) {
        printf("IntToUnsignedChar malloc fail\n");
        return NULL;
    }
    ret[0] = num >> 24;
    ret[1] = num >> 16;
    ret[2] = num >> 8;
    ret[3] = num;
    return ret;
}
unsigned int UnsignedCharToInt(unsigned char* num){
    if (!num) {
        return 0;
    }
    int ret = num[3];
    ret += num[2] << 8;
    ret += num[1] << 16;
    ret += num[0] << 24;
    return ret;
}
void print_buffer(unsigned char* buffer, size_t blen){
    printf("\n");
    for (int i=0; i<blen; i++) {
        printf("0x%02x ", *(buffer+i));
    }
    printf("\n");
}
unsigned char CalculateBCC(unsigned char* buff, int len){
    if (buff == NULL) {
        return 0x00;
    }

    unsigned char bcc= *buff;
    for(int i=1; i<len; i++){
        bcc^=*(buff+i);
    }
    return bcc;
}
int MessageDecode(unsigned char* buffer, size_t blen, unsigned char* cmd, unsigned char** data, size_t* dlen){
    if (buffer == NULL) {
        return -1;
    }

    unsigned char head[2] = {0xff,0xff};
    if (memcmp(buffer, head, 2) != 0) {
        printf("MessageDecode verify msg head fail\n");
        return -1;
    }
    if(*(buffer+blen-2) !=  CalculateBCC(buffer+2, blen-4)){
        printf("MessageDecode:  cheack bcc Failed!\n");
        return -1;
    }
    unsigned char length[4];
    memcpy(length, buffer+2, 4);
    unsigned int length_ = UnsignedCharToInt(length);
    *dlen = length_-1;
	cout<<*dlen<<endl;
    unsigned char* data_ = (unsigned char*)malloc(*dlen);
    if (!data_) {
        printf("MessageDecode malloc data_ fail\n");
        return -1;
    }
    unsigned char cmd_;
    memcpy(&cmd_, buffer+2+4, 1);
    *cmd = cmd_;

    memcpy(data_, buffer+8, *dlen);
    *data = data_;
    return -1;
}

int MessageEncode(unsigned char cmd, unsigned char* data, size_t dlen, unsigned char** msg, size_t* mlen){
    if (data == NULL) {
        return -1;
    }
    unsigned char *msg_ = (unsigned char *)malloc(dlen + 10);
    if (!msg_) {
        printf("MessageEncode: malloc msg fail\n");
        return -1;
    }
    int len = 0;
    memset(msg_+len, 0xff, 2);
    len+=2;
    unsigned int length = 1+dlen;
    unsigned char* length_ = IntToUnsignedChar(length);
    if (!length_) {
        printf("MessageEncode: IntToUnsignedChar fail\n");
        return -1;
    }
    memcpy(msg_+len, length_, 4);
    len+=4;
    memset(msg_+len, cmd, 1);
    len+=1;
    memcpy(msg_+len, data, dlen);
    len+=dlen;
    unsigned char bcc = CalculateBCC(msg_+2, len-2);
    memset(msg_+len, bcc, 1);
    len+=1;
    memset(msg_+len, 0xff, 1);
    len+=1;
    *msg = msg_;
    *mlen = len;
    free(length_);
    return 0;
}

void Recv(){
        unsigned char buffer[2048] = {};
        size_t len = 0;
while(true){
        unsigned char *data = NULL;
        size_t dlen = 0;
        if((len = recv(sock, (void*)buffer, 2048, 0)) <= 0){
             printf("Handler: recv msg fail\n");
             return; 
        }
	printf("recv: %d\n",len);
	print_buffer(buffer, len);
/*
	unsigned char cmd;
	MessageDecode(buffer, len, &cmd, &data, &dlen);
	printf("data: \n");
	print_buffer(data, dlen);

	unsigned char pri[32];
	memcpy(pri, data, 32);
	memcpy(crt, data+32, 162);
	printf("rcrt: \n");
	print_buffer(crt, 162);
	printf("pri: \n");
	print_buffer(pri, 32);
*/
	free(data);

usleep(1);
}

}




int main(){
	if (create_socket() != 0) {
		printf("Start: create_socket fail\n");
		return 0;
	}


 	if (connect(sock, (struct sockaddr *)&addr_,sizeof(struct sockaddr_in)) == -1){
		perror("connect error"); 
		exit(1);
     	} 
	thread t(Recv);
	t.detach();

	//unsigned char data[8];
	//memcpy(data, id.c_str(), 8);
	unsigned char *msg = NULL;
	size_t mlen = 0;
/*
size_t l = 162*2+1;
unsigned char c4[l];
memset(c4, 0x02, 1);
memcpy(c4+1, pcrt, 162);
memcpy(c4+1+162, ecrt, 162);
	MessageEncode(0xc4, c4, l, &msg, &mlen);

	if(send(sock, msg, mlen, 0) == -1){
		perror("send fail");
	}
	printf("send: \n");
	print_buffer(msg, mlen);
	free(msg);
*/
	
/*
	MessageEncode(0x05, ecrt, 162, &msg, &mlen);
	if(send(sock, msg, mlen, 0) == -1){
		perror("send fail");
	}
	printf("send: \n");
	print_buffer(msg, mlen);
	free(msg);
*/
	getchar();
return 0;
}

